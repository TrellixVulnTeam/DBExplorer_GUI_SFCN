from mxsoft import *
import importlib
import traceback
import os
from configparser import ConfigParser
import time
from pyconfig.debugconfig import *


# def getmodule(path) :
#     # 分离模块与方法
#     # index/index.py    
#     url, prefix_ = path.split(".sy")
#     urls = url.split("/")
#     num = len(urls) - 1
#     active = urls[num]
#     urls.pop(num)
    
#     szMod= urls.pop(0)
#     # print('szMod=', szMod)
#     modules =".".join(urls)
#     modules =szMod+'.controller.'+modules
#     # print('modules=', modules)    
#     return modules,active

def run(pSession):
    try:
        # 获取请求参数
        # SessionInit: (param1: 请求Session) (param2: 是否检查session) (param3: 是否获取POST请求数据)
        # return: (tupe[0] 状态 0：成功 其他失败) (tupe[1] ajax回调标识) (tupe[2] 请求参数字典)
        nRet, callbackparam, param = SessionInit(pSession, False, False)

       #print (nRet)
       # print (callbackparam)
       # print (param)


        # 获取mxsessionid
        mxsessionid = CheckMxSession(pSession)
       # print (mxsessionid)

        # 获取Url对象
        url = pSession.GetUrl()

        # 获取请求路径
        path = url.GetPath()
        # print (path)

        # # 分离模块与方法
        # # index/index.py
        # url, prefix_ = path.split(".sy")
        # urls = url.split("/")
        # num = len(urls) - 1
        # active = urls[num]
        # urls.pop(num)
        
        # modules = ".".join(urls)
        # print(modules)

        # 导入模块
       # obj = __import__("controller." + modules, fromlist=True)  # 注意fromlist参数
	   
        # obj = importlib.import_module('.',"controller." + modules)



        url, prefix_ = path.split(".sy")
        urls = url.split("/")
        num = len(urls) - 1
        active = urls[num]
        urls.pop(num)
        
        szMod= urls.pop(0)
    
        modules =".".join(urls)
        modules =szMod+'.controller.'+modules
        
        # modules,active =getmodule(path)
        print('modules=',modules)
        obj = importlib.import_module('.',modules)


        #判断是否需要重新加载文件
        cfg = ConfigParser()
        cfg.read(os.path.dirname(__file__)+'/conf/Pyconf.ini')
        reloadNum = cfg.get('reload', 'reloadNum')
        if reloadNum == '1':
            debugconfig.reload =True

        # 调用模块方法
        if hasattr(obj, active):
            print("-------hasattr-----")
            if debugconfig.reload:
                obj = importlib.reload(obj)
            func = getattr(obj, active)
            func(pSession)
            return WE_MR.WE_MR_OK
        else:
            if debugconfig.reload:
                obj = importlib.reload(obj)
            # num = len(urls) - 1
            class_ = getattr(obj, urls[int(num) - 2])
            cls = class_(pSession)
            attr_obj = getattr(cls, active)
            if hasattr(attr_obj, '__call__'):
                attr_obj()

            # obj = importlib.reload(obj)
            # for i in range(30):
            #     obj = importlib.reload(obj)
            #     sleep(3)
            #return WE_MR.WE_MR_NOTFOUNDPAGE
            return WE_MR.WE_MR_OK
            #print('success')

    except Exception as e:
        str = time.strftime('%Y-%m-%d',time.localtime(time.time()))+'.log'
        path = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))+'/middle/Pymod/'
        if not os.path.exists(path):
            os.makedirs(path)
        print(path)
        traceback.print_exc(file=open(path+str,'w+'))
        return WE_MR.WE_MR_FAILED


